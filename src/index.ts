#!/usr/bin/env node
import typings = require("commander");
import path = require("path");
import fs = require("fs");
import { generateLoadingFile } from "./generateLoadingFile";
import { keyInYN } from "readline-sync"
import { startComment, VERSION } from "./consts";
import { glob } from 'glob'
const dotenv = require("dotenv")
const program = new typings.Command();

program
  .version(VERSION)
  .description("Automatically generate a loading screen for a page file")
  .option('-e, --env <path>', 'Path to .env file', '.env')
  .option('-f, --force', 'Force overwrite, even if loading file has been modified', false)
  .argument('[file]', 'Path to page.(js|ts|jsx|tsx) file. If not provided, all page files in the current directory will be processed.')
  .action((file, options) => {
    // Add check for file argument
    const files = []
    if (!file) {
      // get all page files from the current directory recursively
      const pattern = '**/app/**/page.{js,ts,jsx,tsx}';
      const foundFiles = glob.sync(pattern, { 
        cwd: process.cwd(),
        dot: true,
        nodir: true,
        ignore: [
          '**/.next/**',
          '**/node_modules/**',
          '**/dist/**',
          '**/build/**',
          '**/public/**',
        ],
      });
      console.log("Found page files:", foundFiles);
      files.push(...foundFiles);
    } else {
      files.push(file)
    }
    if (files.length === 0) {
      console.error('Error: No page files found in the current directory')
      process.exit(1)
    }
    
    // Load environment variables
    dotenv.config({ path: options.env })

    // Validate OpenAI API key
    if (!process.env.OPENAI_API_KEY) {
      console.error('Error: OPENAI_API_KEY is required in your .env file')
      process.exit(1)
    }

    for (const file of files) {
      // Validate file extension
      const validExtensions = ['.js', '.ts', '.jsx', '.tsx']
      const fileExt = path.extname(file)
      const fileName = path.basename(file, fileExt)
      const relativePath = path.relative(process.cwd(), file)

      if (!validExtensions.includes(fileExt) || fileName !== 'page') {
        console.error('Error: Input file must be named page.(js|ts|jsx|tsx)')
        process.exit(1)
      }

      // Get full path to input file
      const fullPath = path.resolve(process.cwd(), file)
      
      // Check if file exists
      if (!fs.existsSync(fullPath)) {
        console.error(`Error: File not found: ${fullPath}`)
        process.exit(1)
      }

      // Determine loading file location
      const dir = path.dirname(fullPath)
      const loadingPath = path.join(dir, 'loading.tsx')

      // Check if loading file already exists
      if (fs.existsSync(loadingPath)) {
        const existingLoadingFile = fs.readFileSync(loadingPath, 'utf8')
        
        if (existingLoadingFile.startsWith(startComment)) {
          console.log(`${relativePath}: File is autogenerated. Overwriting with the latest.`)
        } else {
          // File has been modified by user - require force flag or user confirmation
          if (!options.force && 
              !keyInYN(`${relativePath}: File has been modified by user. Overwrite?`, { defaultInput: 'Y'})) {
            console.log('Operation cancelled')
            process.exit(0)
          }
        }
      }

      generateLoadingFile(fullPath)
    }
  })

program.parse(process.argv);